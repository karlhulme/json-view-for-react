{"mappings":"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","sources":["./src/JsonView.js","./src/convertPojoToLines.js","./src/lineTypes.js","./src/contentTypes.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { convertPojoToLines } from './convertPojoToLines'\n\nimport {\n  LINE_TYPE_STRING,\n  LINE_TYPE_NUMBER,\n  LINE_TYPE_BOOLEAN,\n  LINE_TYPE_NULL,\n  LINE_TYPE_STRING_PROPERTY,\n  LINE_TYPE_NUMBER_PROPERTY,\n  LINE_TYPE_BOOLEAN_PROPERTY,\n  LINE_TYPE_NULL_PROPERTY,\n  LINE_TYPE_PROPERTY_OPEN,\n  LINE_TYPE_OBJECT_OPEN,\n  LINE_TYPE_OBJECT_CLOSE,\n  LINE_TYPE_ARRAY_OPEN,\n  LINE_TYPE_ARRAY_CLOSE\n} from './lineTypes'\n\nimport {\n  CODE,\n  LINE,\n  STRING_VALUE,\n  NUMBER_VALUE,\n  BOOLEAN_VALUE,\n  NULL_VALUE,\n  PROPERTY_NAME,\n  LINE_NUMBER\n} from './contentTypes'\n\nconst DefaultCodeElement = styled.code`\n  display: block;\n  padding: 0.5rem;\n  background-color: rgb(40, 44, 52);\n  color: rgb(136, 198, 190);\n  overflow-x: scroll;\n`\n\nconst DefaultLineElement = styled.div`\n  white-space: nowrap;\n`\n\nconst DefaultStringValueSpan = styled.span`color: rgb(121, 182, 242);`\nconst DefaultNumberValueSpan = styled.span`color: rgb(255, 255, 200);`\nconst DefaultBooleanValueSpan = styled.span`color: rgb(197, 165, 197);`\nconst DefaultNullValueSpan = styled.span`color: rgb(197, 165, 197);`\nconst DefaultPropertyNameSpan = styled.span`color: rgb(250, 200, 99);`\n\nconst DefaultLineNumberSpan = styled.span`\n  display: inline-block;\n  width: ${props => (props.charCount + 2) * 0.5}rem;\n  padding-right: 1rem;\n  color: rgb(178, 178, 178);\n  text-align: right;\n  user-select: none;\n`\n\n/**\n * Creates an element using either the provided function or by using\n * the default elements.\n * @param {String} contentType The type of content that the element will contain.\n * @param {Object} content The content of the element.\n * @param {Number} [key] An optional key for the element.  This value is required\n * and only used for the LINE element.\n * @param {Object} jsonCodeInfo Additional information about the json code that might\n * be useful for creating an element.\n * @param {Function} [onCreateElement] An optional function that creates an element.\n */\nfunction createElement (contentType, content, key, jsonCodeInfo, onCreateElement) {\n  let element = null\n\n  if (onCreateElement) {\n    element = onCreateElement(contentType, content, jsonCodeInfo)\n  }\n\n  if (!React.isValidElement(element)) {\n    switch (contentType) {\n      case CODE: return <DefaultCodeElement className='json-view-for-react'>{content}</DefaultCodeElement>\n      case LINE: return <DefaultLineElement className='line' key={key}>{content}</DefaultLineElement>\n      case STRING_VALUE: return <DefaultStringValueSpan className='str'>{content}</DefaultStringValueSpan>\n      case NUMBER_VALUE: return <DefaultNumberValueSpan className='num'>{content}</DefaultNumberValueSpan>\n      case BOOLEAN_VALUE: return <DefaultBooleanValueSpan className='bool'>{content}</DefaultBooleanValueSpan>\n      case NULL_VALUE: return <DefaultNullValueSpan className='null'>{content}</DefaultNullValueSpan>\n      case PROPERTY_NAME: return <DefaultPropertyNameSpan className='prop'>{content}</DefaultPropertyNameSpan>\n      case LINE_NUMBER: return <DefaultLineNumberSpan className='ln' charCount={jsonCodeInfo.lineNoCharCount}>{content}</DefaultLineNumberSpan>\n      /* istanbul ignore next */ // There is no case for getting an unrecognised contentType here.\n      default: return <span>{content}</span>\n    }\n  }\n\n  return element\n}\n\n/**\n * Converts the description of a line (as described by a line object) into a React fragment\n * that contains zero or more span elements.\n * @param {Object} line An object that has lineNo, type, propertyName and/or propertyValue properties\n * that describes a line of JSON code.\n * @param {Object} jsonCodeInfo Additional information about the json code that might\n * be useful for creating an element.\n * @param {Function} [onCreateElement] An optional function that can create an element.\n */\nfunction convertLineToCodeLineContent (line, jsonCodeInfo, onCreateElement) {\n  // curry the span creator to reduce the length of the lines below\n  const fnElem = (contentType, content) => createElement(contentType, content, null, jsonCodeInfo, onCreateElement)\n\n  switch (line.type) {\n    case LINE_TYPE_STRING: return <>{fnElem(STRING_VALUE, `\"${line.propertyValue}\"`)}</>\n    case LINE_TYPE_NUMBER: return <>{fnElem(NUMBER_VALUE, line.propertyValue.toString())}</>\n    case LINE_TYPE_BOOLEAN: return <>{fnElem(BOOLEAN_VALUE, line.propertyValue ? 'true' : 'false')}</>\n    case LINE_TYPE_NULL: return <>{fnElem(NULL_VALUE, 'null')}</>\n    case LINE_TYPE_STRING_PROPERTY: return <>{fnElem(PROPERTY_NAME, `\"${line.propertyName}\"`)}: {fnElem(STRING_VALUE, `\"${line.propertyValue}\"`)}</>\n    case LINE_TYPE_NUMBER_PROPERTY: return <>{fnElem(PROPERTY_NAME, `\"${line.propertyName}\"`)}: {fnElem(NUMBER_VALUE, line.propertyValue.toString())}</>\n    case LINE_TYPE_BOOLEAN_PROPERTY: return <>{fnElem(PROPERTY_NAME, `\"${line.propertyName}\"`)}: {fnElem(BOOLEAN_VALUE, line.propertyValue ? 'true' : 'false')}</>\n    case LINE_TYPE_NULL_PROPERTY: return <>{fnElem(PROPERTY_NAME, `\"${line.propertyName}\"`)}: {fnElem(NULL_VALUE, 'null')}</>\n    case LINE_TYPE_PROPERTY_OPEN: return <>{fnElem(PROPERTY_NAME, `\"${line.propertyName}\"`)}:</>\n    case LINE_TYPE_OBJECT_OPEN: return <>{'{'}</>\n    case LINE_TYPE_OBJECT_CLOSE: return <>{'}'}</>\n    case LINE_TYPE_ARRAY_OPEN: return <>[</>\n    case LINE_TYPE_ARRAY_CLOSE: return <>]</>\n    /* istanbul ignore next */ // There is no case for getting an unrecognised line.type here.\n    default: return null\n  }\n}\n\n/**\n * Returns the number of characters required to display\n * the largest line number.\n * @param {Number} lineCount The number of lines of code.\n */\nfunction calculateCharCountForLineNumbers (lineCount) {\n  return Math.ceil(Math.log10(lineCount))\n}\n\n/**\n * A syntax-highlighted view of a JSON object.\n * @param {Object} props A property bag.\n * @param {Object} props.obj A JSON object to be displayed.\n * @param {Boolean} [props.showLineNumbers] An optional boolean that indicates if line\n * numbers should be displayed next to each line.\n * @param {Function} [props.onCreateElement] An optional function (contentType, content) that\n * can return a bespoke element for any given contentType rather than use the defaults.\n * If the function does not return a value that satisfies React.isValidElement then the\n * default will be used instead.  So you don't have to support every contentType value.\n */\nexport function JsonView ({ obj, showLineNumbers = false, onCreateElement = null }) {\n  const lines = convertPojoToLines(obj)\n\n  const jsonCodeInfo = {\n    lineNoCharCount: calculateCharCountForLineNumbers(lines.length)\n  }\n\n  const codeLines = lines.map((line, index) => {\n    const lineNumberSpan = showLineNumbers ? createElement(LINE_NUMBER, line.lineNo.toString(), null, jsonCodeInfo, onCreateElement) : ''\n    const spaces = '\\u00a0'.repeat(line.indent)\n    const lineContent = convertLineToCodeLineContent(line, jsonCodeInfo, onCreateElement)\n\n    return createElement(LINE, <>{lineNumberSpan}{spaces}{lineContent}</>, index, jsonCodeInfo, onCreateElement)\n  })\n\n  return createElement(CODE, codeLines, null, jsonCodeInfo, onCreateElement)\n}\n\nJsonView.propTypes = {\n  obj: PropTypes.any,\n  showLineNumbers: PropTypes.bool,\n  onCreateElement: PropTypes.func\n}\n","import {\n  LINE_TYPE_STRING,\n  LINE_TYPE_NUMBER,\n  LINE_TYPE_BOOLEAN,\n  LINE_TYPE_NULL,\n  LINE_TYPE_STRING_PROPERTY,\n  LINE_TYPE_NUMBER_PROPERTY,\n  LINE_TYPE_BOOLEAN_PROPERTY,\n  LINE_TYPE_NULL_PROPERTY,\n  LINE_TYPE_PROPERTY_OPEN,\n  LINE_TYPE_OBJECT_OPEN,\n  LINE_TYPE_OBJECT_CLOSE,\n  LINE_TYPE_ARRAY_OPEN,\n  LINE_TYPE_ARRAY_CLOSE\n} from './lineTypes'\n\n/**\n * Returns an object with the given values initialised.\n * @param {Number} indent The number of indentations before the content of the line should begin.\n * @param {String} type The type of line, from the lineTypes constants.\n * @param {String} [propertyName] The name of a property, if applicable.\n * @param {String} [propertyValue] The name of a value, if applicable.\n * @param {Boolean} [continuation] True if the property should be concluded with a comma.\n */\nfunction createLine (indent, type, propertyName = null, propertyValue = null, continuation = false) {\n  return {\n    lineNo: -1,\n    indent,\n    type,\n    propertyName,\n    propertyValue,\n    continuation\n  }\n}\n\n/**\n * Converts the given array to a sequence of lines for display.\n * @param {Object} array An array to be converted.\n * @param {Number} [indent] The current indentation level.\n * @param {Boolean} [continuation] True if the last line needs to include a continuation mark.\n */\nfunction convertArrayToLines (array, indent = 0, continuation = false) {\n  const lines = []\n\n  lines.push(createLine(indent, LINE_TYPE_ARRAY_OPEN))\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i]\n    const arrayContinuation = i < array.length - 1\n\n    if (Array.isArray(value)) {\n      lines.push(...convertArrayToLines(value, indent + 2, arrayContinuation))\n    } else if (typeof value === 'object' && value !== null) {\n      lines.push(...convertObjectToLines(value, indent + 2, arrayContinuation))\n    } else if (typeof value === 'string') {\n      lines.push(createLine(indent + 2, LINE_TYPE_STRING, null, value, arrayContinuation))\n    } else if (typeof value === 'number') {\n      lines.push(createLine(indent + 2, LINE_TYPE_NUMBER, null, value, arrayContinuation))\n    } else if (typeof value === 'boolean') {\n      lines.push(createLine(indent + 2, LINE_TYPE_BOOLEAN, null, value, arrayContinuation))\n    } else if (value === null) {\n      lines.push(createLine(indent + 2, LINE_TYPE_NULL, null, value, arrayContinuation))\n    } else {\n      // ignore values that are a function or undefined\n    }\n  }\n\n  lines.push(createLine(indent, LINE_TYPE_ARRAY_CLOSE, null, null, continuation))\n\n  return lines\n}\n\n/**\n * Converts the given object to a sequence of lines for display.\n * @param {Object} obj An object to be converted.\n * @param {Number} [indent] The current indentation level.\n * @param {Boolean} [continuation] True if the last line needs to include a continuation mark.\n */\nfunction convertObjectToLines (obj, indent = 0, continuation = false) {\n  const lines = []\n\n  lines.push(createLine(indent, LINE_TYPE_OBJECT_OPEN))\n\n  const keys = Object.keys(obj)\n\n  for (let i = 0; i < keys.length; i++) {\n    const propertyName = keys[i]\n    const propertyValue = obj[propertyName]\n    const propertiesContinuation = i < keys.length - 1\n\n    if (Array.isArray(propertyValue)) {\n      lines.push(createLine(indent + 2, LINE_TYPE_PROPERTY_OPEN, propertyName))\n      lines.push(...convertArrayToLines(propertyValue, indent + 2, propertiesContinuation))\n    } else if (typeof propertyValue === 'object' && propertyValue !== null) {\n      lines.push(createLine(indent + 2, LINE_TYPE_PROPERTY_OPEN, propertyName))\n      lines.push(...convertObjectToLines(propertyValue, indent + 2, propertiesContinuation))\n    } else if (typeof propertyValue === 'string') {\n      lines.push(createLine(indent + 2, LINE_TYPE_STRING_PROPERTY, propertyName, propertyValue, propertiesContinuation))\n    } else if (typeof propertyValue === 'number') {\n      lines.push(createLine(indent + 2, LINE_TYPE_NUMBER_PROPERTY, propertyName, propertyValue, propertiesContinuation))\n    } else if (typeof propertyValue === 'boolean') {\n      lines.push(createLine(indent + 2, LINE_TYPE_BOOLEAN_PROPERTY, propertyName, propertyValue, propertiesContinuation))\n    } else if (propertyValue === null) {\n      lines.push(createLine(indent + 2, LINE_TYPE_NULL_PROPERTY, propertyName, propertyValue, propertiesContinuation))\n    } else {\n      // ignore properties where the value is a function or undefined\n    }\n  }\n\n  lines.push(createLine(indent, LINE_TYPE_OBJECT_CLOSE, null, null, continuation))\n\n  return lines\n}\n\n/**\n * Converts the given obj parameter to a sequence of lines for display.\n * @param {Any} obj Any JS object.\n */\nfunction convertInputToLines (obj) {\n  if (typeof obj === 'string') {\n    return [createLine(0, LINE_TYPE_STRING, null, obj)]\n  } else if (typeof obj === 'number') {\n    return [createLine(0, LINE_TYPE_NUMBER, null, obj)]\n  } else if (typeof obj === 'boolean') {\n    return [createLine(0, LINE_TYPE_BOOLEAN, null, obj)]\n  } else if (obj === null) {\n    return [createLine(0, LINE_TYPE_NULL)]\n  } else if (typeof obj === 'object' && !Array.isArray(obj)) {\n    return convertObjectToLines(obj)\n  } else if (Array.isArray(obj)) {\n    return convertArrayToLines(obj)\n  } else {\n    return [] // cannot handle undefineds or functions\n  }\n}\n\n/**\n * Returns an array of line objects that can be used to produce a display.\n * Each line has a lineNo, indent and a type.  The type dictates whether\n * the propertyName and/or propertyValue properties will be populated.\n *\n * For example: a line with a type of LINE_TYPE_STRING_PROPERTY will\n * have a propertyName and a propertyValue property.\n * @param {Any} obj The object to be converted to an array of lines.\n */\nexport function convertPojoToLines (obj) {\n  const lines = convertInputToLines(obj)\n  lines.forEach((line, index) => { line.lineNo = index + 1 })\n  return lines\n}\n","/**\n * The constants in this file identify the possible types of lines\n * that can appear in a JSON file.\n *\n * All lines may optionally end in a comma, if there is a subsequent line.\n */\n\n// \"myString\"\nexport const LINE_TYPE_STRING = 'LINE_TYPE_STRING'\n\n// 1234\nexport const LINE_TYPE_NUMBER = 'LINE_TYPE_NUMBER'\n\n// true\nexport const LINE_TYPE_BOOLEAN = 'LINE_TYPE_BOOLEAN'\n\n// null\nexport const LINE_TYPE_NULL = 'LINE_TYPE_NULL'\n\n// \"myProperty\": \"myString\"\nexport const LINE_TYPE_STRING_PROPERTY = 'LINE_TYPE_STRING_PROPERTY'\n\n// \"myProperty\": 1234\nexport const LINE_TYPE_NUMBER_PROPERTY = 'LINE_TYPE_NUMBER_PROPERTY'\n\n// \"myProperty\": true\nexport const LINE_TYPE_BOOLEAN_PROPERTY = 'LINE_TYPE_BOOLEAN_PROPERTY'\n\n// \"myProperty\": null\nexport const LINE_TYPE_NULL_PROPERTY = 'LINE_TYPE_NULL_PROPERTY'\n\n// \"myProperty\":\nexport const LINE_TYPE_PROPERTY_OPEN = 'LINE_TYPE_PROPERTY_OPEN'\n\n// {\nexport const LINE_TYPE_OBJECT_OPEN = 'LINE_TYPE_OBJECT_OPEN'\n\n// }\nexport const LINE_TYPE_OBJECT_CLOSE = 'LINE_TYPE_OBJECT_CLOSE'\n\n// [\nexport const LINE_TYPE_ARRAY_OPEN = 'LINE_TYPE_ARRAY_OPEN'\n\n// ]\nexport const LINE_TYPE_ARRAY_CLOSE = 'LINE_TYPE_ARRAY_CLOSE'\n","/**\n * The constants in this file identify the types of content\n * that the JsonView needs to be able to display.\n */\n\n// A wrapper for the entire code block.\nexport const CODE = 'CODE'\n\n// A wrapper for a line of code.\nexport const LINE = 'LINE'\n\n// \"myString\"\nexport const STRING_VALUE = 'STRING_VALUE'\n\n// 1234\nexport const NUMBER_VALUE = 'NUMBER_VALUE'\n\n// true\nexport const BOOLEAN_VALUE = 'BOOLEAN_VALUE'\n\n// null\nexport const NULL_VALUE = 'NULL_VALUE'\n\n// \"myProperty\"\nexport const PROPERTY_NAME = 'PROPERTY_NAME'\n\n// 1\n// 2\n// 3\nexport const LINE_NUMBER = 'LINE_NUMBER'\n"],"names":["$f49f21a0d076a37869aad08d44625d$var$_react","$f49f21a0d076a37869aad08d44625d$var$_interopRequireDefault","_react","$f49f21a0d076a37869aad08d44625d$var$_propTypes","_propTypes","$f49f21a0d076a37869aad08d44625d$var$_styledComponents","_styledComponents","obj","lines","createLine","LINE_TYPE_STRING","LINE_TYPE_NUMBER","LINE_TYPE_BOOLEAN","LINE_TYPE_NULL","Array","isArray","convertArrayToLines","convertObjectToLines","convertInputToLines","forEach","line","index","lineNo","indent","type","propertyName","propertyValue","continuation","array","push","LINE_TYPE_ARRAY_OPEN","i","length","value","arrayContinuation","LINE_TYPE_ARRAY_CLOSE","LINE_TYPE_OBJECT_OPEN","keys","Object","propertiesContinuation","LINE_TYPE_PROPERTY_OPEN","LINE_TYPE_STRING_PROPERTY","LINE_TYPE_NUMBER_PROPERTY","LINE_TYPE_BOOLEAN_PROPERTY","LINE_TYPE_NULL_PROPERTY","LINE_TYPE_OBJECT_CLOSE","DefaultCodeElement","styled","code","DefaultLineElement","div","DefaultStringValueSpan","span","DefaultNumberValueSpan","DefaultBooleanValueSpan","DefaultNullValueSpan","DefaultPropertyNameSpan","DefaultLineNumberSpan","props","charCount","createElement","contentType","content","key","jsonCodeInfo","onCreateElement","element","React","isValidElement","CODE","default","$f49f21a0d076a37869aad08d44625d$var$DefaultCodeElement","className","LINE","$f49f21a0d076a37869aad08d44625d$var$DefaultLineElement","STRING_VALUE","$f49f21a0d076a37869aad08d44625d$var$DefaultStringValueSpan","NUMBER_VALUE","$f49f21a0d076a37869aad08d44625d$var$DefaultNumberValueSpan","BOOLEAN_VALUE","$f49f21a0d076a37869aad08d44625d$var$DefaultBooleanValueSpan","NULL_VALUE","$f49f21a0d076a37869aad08d44625d$var$DefaultNullValueSpan","PROPERTY_NAME","$f49f21a0d076a37869aad08d44625d$var$DefaultPropertyNameSpan","LINE_NUMBER","$f49f21a0d076a37869aad08d44625d$var$DefaultLineNumberSpan","lineNoCharCount","JsonView","showLineNumbers","$b36ddbf32b870da7b6b40f7c317772e3$exports","convertPojoToLines","lineCount","Math","ceil","log10","codeLines","map","lineNumberSpan","toString","spaces","repeat","lineContent","fnElem","Fragment","convertLineToCodeLineContent","propTypes","PropTypes","any","bool","func"],"version":3,"file":"index.js.map"}